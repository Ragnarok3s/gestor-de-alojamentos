const crypto = require('node:crypto');

function normalizeSalt(input) {
  if (!input) {
    return { rounds: '10', salt: crypto.randomBytes(8).toString('hex') };
  }
  if (typeof input === 'number') {
    return { rounds: String(input), salt: crypto.randomBytes(8).toString('hex') };
  }
  const parts = String(input).split('$');
  if (parts.length === 3) {
    return { rounds: parts[0] || '10', salt: parts[1] || crypto.randomBytes(8).toString('hex') };
  }
  if (parts.length === 2) {
    return { rounds: parts[0] || '10', salt: parts[1] || crypto.randomBytes(8).toString('hex') };
  }
  return { rounds: '10', salt: parts[0] || crypto.randomBytes(8).toString('hex') };
}

function createHash(payload, rounds, salt) {
  return crypto.createHash('sha256').update(String(payload) + salt + rounds).digest('hex');
}

function genSaltSync(rounds = 10) {
  const normalized = normalizeSalt(rounds);
  return `${normalized.rounds}$${normalized.salt}`;
}

function hashSync(payload, saltOrRounds = 10) {
  const { rounds, salt } = normalizeSalt(saltOrRounds);
  const digest = createHash(payload, rounds, salt);
  return `${rounds}$${salt}$${digest}`;
}

function compareSync(payload, hashed) {
  if (typeof hashed !== 'string') return false;
  const parts = hashed.split('$');
  if (parts.length !== 3) return false;
  const [rounds, salt, digest] = parts;
  try {
    const expected = createHash(payload, rounds || '10', salt || '');
    return crypto.timingSafeEqual(Buffer.from(expected), Buffer.from(digest));
  } catch (err) {
    return false;
  }
}

module.exports = {
  genSaltSync,
  hashSync,
  compareSync,
};
